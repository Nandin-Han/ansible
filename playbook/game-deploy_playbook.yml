---
- name: 游戏服务器自动部署
  hosts: game_servers
  become: true
  gather_facts: true

  vars_files:
    - vars/game-deploy-vars.yml

  vars:
    # 日志配置
    log_file: "ansible/logs/game-deploy.log"
    playbook_name: "game-deploy"

    # SVN URLs
    svn_game_pg_url: "{{ svn_root_url }}/{{ project_base_dir }}/{{ pg_game_path }}"
    svn_public_url: "{{ svn_root_url }}/{{ project_base_dir }}/{{ public_file_path }}"
    svn_platform_url: "{{ svn_root_url }}/{{ project_base_dir }}/{{ platform_path }}"

    # 本地路径
    local_public_dir: "{{ project_root_dir }}/{{ project_base_dir }}/{{ public_file_path }}"
    local_platform_dir: "{{ project_root_dir }}/{{ project_base_dir }}/{{ platform_path }}"

    # Supervisor配置
    supervisor_dir: /etc/supervisord.d
    supervisor_program_name: "{{ room_num }}-{{ game_name }}-{{ game_room }}"

    # 游戏配置
    start_file: "room_{{ game_name }}"
    game_server_dir: "{{ project_root_dir }}/{{ game_room }}/{{ game_name }}"

    # 模板路径配置（从变量文件中读取，在任务中动态选择）
    # game_server_tmp 将根据主机类型动态设置

  tasks:
    - name: 创建日志目录
      ansible.builtin.file:
        path: "ansible/logs"
        state: directory
        mode: "0755"
      delegate_to: localhost

    - name: 记录部署开始日志
      ansible.builtin.lineinfile:
        path: "{{ log_file }}"
        line: >
          [{{ ansible_date_time.iso8601 }}] [{{ playbook_name }}] [NOTICE] 游戏服务器部署开始 -
          主机={{ inventory_hostname }}, GameName={{ game_name | default('UNDEFINED') }},
          GameID={{ game_id | default('UNDEFINED') }},
          RoomNum={{ room_num | default('UNDEFINED') }},
          GameRoom={{ game_room | default('UNDEFINED') }}
        create: true
        mode: "0644"
      delegate_to: localhost

    - name: 验证必需参数
      block:
        - name: 执行参数验证
          ansible.builtin.assert:
            that:
              - game_name is defined and game_name != ""
              - game_id is defined and game_id != ""
              - room_num is defined and room_num != ""
              - game_room is defined and game_room != ""
            fail_msg: "必需参数缺失。用法: ansible-playbook game-deploy.yml -e 'game_name=tongits game_id=10001 room_num=1 game_room=room-00001'"
            success_msg: "参数验证通过: GameName={{ game_name }}, GameID={{ game_id }}, RoomNum={{ room_num }}, Game_Room={{ game_room }}"

        - name: 记录参数验证成功日志
          ansible.builtin.lineinfile:
            path: "{{ log_file }}"
            line: >
              [{{ ansible_date_time.iso8601 }}] [{{ playbook_name }}] [NOTICE] 参数验证通过 -
              主机={{ inventory_hostname }}, GameName={{ game_name }}, GameID={{ game_id }},
              RoomNum={{ room_num }}, GameRoom={{ game_room }}
            mode: "0644"
          delegate_to: localhost
      rescue:
        - name: 记录参数验证失败日志
          ansible.builtin.lineinfile:
            path: "{{ log_file }}"
            line: "[{{ ansible_date_time.iso8601 }}] [{{ playbook_name }}] [ERROR] 参数验证失败 - 主机={{ inventory_hostname }}, 必需参数缺失或格式错误"
            mode: "0644"
          delegate_to: localhost

        - name: 终止执行
          ansible.builtin.fail:
            msg: "必需参数缺失。用法: ansible-playbook game-deploy.yml -e 'game_name=tongits game_id=10001 room_num=1 game_room=room-00001'"

    - name: 验证GameID和RoomNum为数字
      ansible.builtin.assert:
        that:
          - game_id | regex_search('^[0-9]+$')
          - room_num | regex_search('^[0-9]+$')
        fail_msg: "GameID和RoomNum必须是数字"

    - name: 验证GameName和Game_Room只包含安全字符
      ansible.builtin.assert:
        that:
          - game_name | regex_search('^[a-zA-Z0-9_-]+$')
          - game_room | regex_search('^[a-zA-Z0-9_-]+$')
        fail_msg: "GameName和Game_Room只能包含字母、数字、下划线和连字符"

    - name: 根据主机设置模板路径
      ansible.builtin.set_fact:
        game_server_tmp: >-
          {%- if inventory_hostname in ['sg-01', 'sg-02', 'sg-03'] -%}
          {{ sg_game_server_tmp }}{%- elif inventory_hostname in ['us-01', 'us-02'] -%}
          {{ us_game_server_tmp }}{%- elif inventory_hostname == 'pre-release-server' -%}
          {{ pre_game_server_tmp }}{%- else -%}
          EXITED{%- endif -%}

    - name: 验证模板路径设置
      ansible.builtin.debug:
        msg: |
          主机: {{ inventory_hostname }} ({{ ansible_host }})
          选择的模板路径: {{ game_server_tmp }}

    - name: 检查模板路径是否有效
      ansible.builtin.fail:
        msg: "未知的主机类型或模板路径配置错误: {{ inventory_hostname }}"
      when: game_server_tmp == "EXITED"

    - name: 检查必需的依赖命令
      ansible.builtin.command: which {{ item }}
      register: dependency_check
      failed_when: dependency_check.rc != 0
      changed_when: false
      loop:
        - svn
        - make
        - sed
        - awk
        - grep
        - supervisorctl
      tags: dependencies

    - name: 创建必要目录
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ host_game_pg_dir }}"
        - "{{ host_bin_file_dir }}"
        - "{{ project_root_dir }}/{{ game_room }}"
      tags: directories

    - name: 检查SVN目录是否存在
      ansible.builtin.stat:
        path: "{{ host_game_pg_dir }}/.svn"
      register: svn_dir

    - name: SVN首次检出代码
      ansible.builtin.subversion:
        repo: "{{ svn_game_pg_url }}"
        dest: "{{ host_game_pg_dir }}"
        checkout: true
        force: true
      when: not svn_dir.stat.exists
      register: svn_checkout

    - name: SVN更新代码
      ansible.builtin.subversion:
        repo: "{{ svn_game_pg_url }}"
        dest: "{{ host_game_pg_dir }}"
        update: true
      when: svn_dir.stat.exists
      register: svn_update
      tags: svn

    - name: 检查游戏源码目录是否存在
      ansible.builtin.stat:
        path: "{{ host_game_pg_dir }}/{{ game_name }}"
      register: game_src_dir

    - name: 确认游戏源码目录存在
      ansible.builtin.fail:
        msg: "未找到游戏源码目录: {{ host_game_pg_dir }}/{{ game_name }}"
      when: not game_src_dir.stat.exists

    - name: 编译游戏
      block:
        - name: 执行游戏编译
          ansible.builtin.command: make rebuild
          args:
            chdir: "{{ host_game_pg_dir }}/{{ game_name }}"
          register: compile_result
          changed_when: compile_result.rc == 0
          tags: compile

        - name: 记录编译成功日志
          ansible.builtin.lineinfile:
            path: "{{ log_file }}"
            line: "[{{ ansible_date_time.iso8601 }}] [{{ playbook_name }}] [NOTICE] 游戏编译成功 - 主机={{ inventory_hostname }}, {{ game_name }}"
            mode: "0644"
          delegate_to: localhost
      rescue:
        - name: 记录编译失败日志
          ansible.builtin.lineinfile:
            path: "{{ log_file }}"
            line: "[{{ ansible_date_time.iso8601 }}] [{{ playbook_name }}] [ERROR] 游戏编译失败 - 主机={{ inventory_hostname }}, {{ game_name }}"
            mode: "0644"
          delegate_to: localhost

        - name: 终止执行
          ansible.builtin.fail:
            msg: "游戏编译失败"

    - name: 解析makefile获取LIBNAME
      ansible.builtin.shell: |
        set -o pipefail
        grep -i '^LIBNAME' {{ host_game_pg_dir }}/{{ game_name }}/makefile | head -1 | awk -F '=' '{gsub(/^[ \t]+|[ \t]+$/,"",$2); print $2}'
      register: so_file_result
      changed_when: false

    - name: 解析makefile获取SODIR的文件夹
      ansible.builtin.shell: |
        set -o pipefail
        grep -i '^SODIR' {{ host_game_pg_dir }}/{{ game_name }}/makefile | head -1 | awk -F '/' '{print $5}'
      register: so_folder_result
      changed_when: false

    - name: 设置产物变量
      ansible.builtin.set_fact:
        so_file: "{{ so_file_result.stdout }}"
        so_file_dist_folder: "{{ so_folder_result.stdout }}"
        so_file_dir: "{{ host_bin_file_dir }}/{{ so_folder_result.stdout }}"

    - name: 验证编译产物存在
      ansible.builtin.stat:
        path: "{{ so_file_dir }}/{{ so_file }}"
      register: compiled_file
      failed_when: not compiled_file.stat.exists

    - name: 检查现有游戏服务器目录
      ansible.builtin.stat:
        path: "{{ game_server_dir }}"
      register: existing_server

    - name: 检查模板目录存在
      ansible.builtin.stat:
        path: "{{ game_server_tmp }}"
      register: template_dir
      failed_when: not template_dir.stat.exists

    - name: 创建游戏服务器目录
      ansible.builtin.file:
        path: "{{ game_server_dir }}"
        state: directory
        mode: "0755"

    - name: 复制模板文件到服务器目录
      ansible.builtin.shell: |
        shopt -s dotglob && cp -a "{{ game_server_tmp }}"/* "{{ game_server_dir }}"/
      args:
        executable: /bin/bash
      changed_when: true
      tags: template

    - name: 检查config.xml文件是否存在
      ansible.builtin.stat:
        path: "{{ game_server_dir }}/config.xml"
      register: config_xml

    - name: 更新config.xml配置
      ansible.builtin.replace:
        path: "{{ game_server_dir }}/config.xml"
        regexp: 'name=""'
        replace: 'name="{{ so_file }}"'
      when: config_xml.stat.exists

    - name: 更新config.xml中的game_id
      ansible.builtin.replace:
        path: "{{ game_server_dir }}/config.xml"
        regexp: 'game_id=""'
        replace: 'game_id="{{ game_id }}"'
      when: config_xml.stat.exists

    - name: 检查room文件是否存在
      ansible.builtin.stat:
        path: "{{ game_server_dir }}/room"
      register: room_file

    - name: 重命名启动文件
      ansible.builtin.command: mv {{ game_server_dir }}/room {{ game_server_dir }}/{{ start_file }}
      when: room_file.stat.exists
      changed_when: true

    - name: 复制编译产物到服务器目录
      ansible.builtin.copy:
        src: "{{ so_file_dir }}/{{ so_file }}"
        dest: "{{ game_server_dir }}/{{ so_file }}"
        mode: "0755"
        remote_src: true

    - name: 设置启动文件权限
      ansible.builtin.file:
        path: "{{ game_server_dir }}/{{ start_file }}"
        mode: "0755"

    - name: 创建supervisor配置文件
      ansible.builtin.template:
        src: supervisor.conf.j2
        dest: "{{ supervisor_dir }}/{{ supervisor_program_name }}.conf"
        mode: "0644"

    - name: 显示supervisor启动选项
      ansible.builtin.debug:
        msg: |
          Supervisor配置文件已创建: {{ supervisor_dir }}/{{ supervisor_program_name }}.conf
          {% if start_supervisor | default(false) %}
          即将启动supervisor进程...
          {% else %}
          跳过启动supervisor进程（start_supervisor=false）
          {% endif %}

    - name: 启动supervisor进程
      ansible.builtin.command: "{{ item }}"
      loop:
        - supervisorctl reread
        - supervisorctl update
      when: start_supervisor | default(false) | bool
      changed_when: true

    - name: 验证服务启动状态
      community.general.supervisorctl:
        name: "{{ supervisor_program_name }}"
        state: present
      register: final_status
      retries: 30
      delay: 1
      until: final_status.state == 'RUNNING'
      failed_when: final_status.state in ['FATAL', 'EXITED']
      when: start_supervisor | default(false) | bool
      changed_when: false

    - name: 记录部署完成日志
      ansible.builtin.lineinfile:
        path: "{{ log_file }}"
        line: >
          [{{ ansible_date_time.iso8601 }}] [{{ playbook_name }}] [NOTICE] 游戏服务器部署完成 -
          主机={{ inventory_hostname }}, {{ supervisor_program_name }}, 启动状态={{ start_supervisor | default(false) }}
        mode: "0644"
      delegate_to: localhost

    - name: 显示部署结果
      ansible.builtin.debug:
        msg: |
          部署完成！
          服务名称: {{ supervisor_program_name }}
          {% if start_supervisor | default(false) %}
          服务状态: {{ final_status.stdout | default('未知') }}
          日志位置: {{ game_server_dir }}/log/
          访问日志: {{ game_server_dir }}/log/{{ supervisor_program_name }}-access.log
          错误日志: {{ game_server_dir }}/log/{{ supervisor_program_name }}-error.log
          {% else %}
          Supervisor进程未启动，如需启动请手动执行：
          sudo supervisorctl reread && sudo supervisorctl update
          {% endif %}
